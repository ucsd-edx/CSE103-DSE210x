<problem>
  <text>
    <script type="loncapa/python">
# random variables (no need to import random library)
a = random.randrange(10,14,1)
n = random.randrange(2,5,1)

# Solutions with variables converted to string
# Make sure you name the solution with part id at the end. e.g. 'solution1' will be solution for part 1.
solution1 = "3*2"
solution2 = "{0}*2*{1}".format(a,n)

# Group all solutions into a list
solutions = [solution1, solution2]


# hint text id
hint_text_id = ["cse103fall2016week1problem1part1","cse103fall2016week1problem1part2"]
    </script>

    <script type="text/javascript">
      //fill in number of hint
        var hint_number = 2;

      //fill in hint input box id
        var hintIds = ["input_57ccdc78397649aca59b419c95573254_2_1",
                "input_1ddc9e0c3eea4ba3b61b291a7cfb650d_2_1"];

      //fill in problem input box id
        var proIds = ["input_0463a3ce78dd46429e9e2fcf681616d9_2_1",
               "input_0463a3ce78dd46429e9e2fcf681616d9_3_1"];
               
      //fill in hint text id. Need to match the hint_text_id from above
        var hintTextIds = ["cse103fall2016week1problem1part1",
                  "cse103fall2016week1problem1part2"];
    </script>



<ul>
<li>For lunch, you eat a sandwich and a piece of fruit. The sandwich can be either veggie, chicken, or beef; and the fruit can be  an orange or an apple.</li>
</ul>
<p>How many different lunch combinations do you have?</p>


    <customresponse cfn="check" expect="\[$solution1\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


<ul>
<li>A particular brand of shirt comes in $a colors, has a male version and a female version, and comes in $n sizes for each sex.</li>
</ul>
<p>How many different types of this shirt are made?</p>


    <customresponse cfn="check" expect="\[$solution2\]">
      <textline/>
      <hintgroup hintfn="hint_fn"/>
    </customresponse>


    

    

    <script type="loncapa/python">
from hint import evaluate
from hint.get_hint import get_hint

# grader of the problem
def check(expect, ans):
  return evaluate.evaluate(expect, ans)

# hint function
def hint_fn(answer_ids, student_answers, new_cmap, old_cmap):
  aid = answer_ids[0]
  ans = str(student_answers[aid])
  i = int(aid[-3])-2

  if ans == "":
    return
  key = new_cmap.keys()[0]
  if new_cmap[key]['correctness'] == "correct":
    return

  hint = get_hint(solutions[i], ans, hint_text_id, i)
  new_cmap.set_hint_and_mode(aid,hint,'always')
    </script>

        
    <script type="text/javascript" src="/static/js/adaptive_hint.js"></script>
    <script type="text/javascript">                             
      for (var i=0; i != hint_number; i++) {
        hide_hint(i);
      }
      show_hint(hint_number);
    </script>

  </text>
</problem>